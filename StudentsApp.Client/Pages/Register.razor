@page "/register"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using System.Text.Json;
@using StudentsApp.Client.Models;


<h3>Register</h3>

<EditForm Model="user" OnSubmit="HandleRegister">
    <label for="username">Name</label>
    <InputText id="username" class="form-control" @bind-Value="user.Username" />
    <ValidationMessage For="@(() => user.Username)" />

    <label for="email">Email</label>
    <InputText id="email" class="form-control" @bind-Value="user.Email" />
    <ValidationMessage For="@(() => user.Email)" />

    <label for="password">Password</label>
    <InputText id="password" class="form-control" @bind-Value="user.Password" type="password" />
    <ValidationMessage For="@(() => user.Password)" />
    <br/>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorDivMessage))
{
    <div class="alert alert-danger">@errorDivMessage</div>
    <div class="alert alert-danger">@errorDivDetails</div>
}


<p>You already have an account?</p>
<button @onclick="Login" class="btn btn-primary">Login</button>


@code {

    RegisterUserModel user = new RegisterUserModel();

    string errorMessage;
    public string errorDivMessage;
    public string errorDivDetails;

    public async Task HandleRegister()
    {
        var editContext = new EditContext(user);
        var isValid = editContext.Validate();

        if (isValid)
        {
            string apiUrl = "https://localhost:44363/api/identity/register";
            var result = await Http.PostAsJsonAsync<RegisterUserModel>(apiUrl, user);

            if (result.IsSuccessStatusCode)
            {
                Login();
            }
            else
            {

                var responseContent = await result.Content.ReadAsStringAsync();
                await HandleResponse(responseContent);

                Console.WriteLine(errorDivMessage);
                Console.WriteLine(errorDivDetails);
                user.Password = "";

                
            }
        }
    }

    public async Task HandleResponse(string jsonResponse)
    {
        try
        {
            // Deserialize the JSON response
            var response = JsonSerializer.Deserialize<ApiResponse>(jsonResponse);

            if (response != null && !response.Succeeded)
            {
                // The API call was not successful; handle errors
                string errorMessage = response.Message;
                List<string> errorDetails = response.Errors;

                errorDivMessage = errorMessage;
                errorDivDetails = string.Join("<br />", errorDetails);
            }
        }
        catch (JsonException)
        {
            // Handle JSON parsing errors
            errorDivMessage = "Error parsing JSON response.";
        }
    }

    void Login() => NavigationManager.NavigateTo("login");

}

    
