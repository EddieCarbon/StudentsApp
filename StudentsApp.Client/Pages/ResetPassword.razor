@page "/resetpassword"
@using System.Text.Json;
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h3>ResetPassword</h3>

<EditForm Model="reset" OnSubmit="HandleReset">
    <label for="token">Token</label>
    <InputText id="token" class="form-control" @bind-Value="reset.Token" />
    <ValidationMessage For="@(() => reset.Token)" />
    
        <label for="email">Email</label>
    <InputText id="email" class="form-control" @bind-Value="reset.Email" />
    <ValidationMessage For="@(() => reset.Email)" />
    
    <label for="password">Password</label>
    <InputText id="password" class="form-control" @bind-Value="reset.Password" type="password" />
    <ValidationMessage For="@(() => reset.Password)" />

    <label for="confirmPassword">Confirm password</label>
    <InputText id="confirmPassword" class="form-control" @bind-Value="reset.ConfirmPassword" type="password" />
    <ValidationMessage For="@(() => reset.ConfirmPassword)" />

    <br />
    <button type="submit" class="btn btn-primary">Send</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    Reset reset = new Reset();

    string errorMessage;

    public async Task HandleReset()
    {
        var editContext = new EditContext(reset);
        var isValid = editContext.Validate();

        if (isValid)
        {
            string apiUrl = "https://localhost:44363/api/identity/resetpassword";

            try
            {
                var result = await Http.PostAsJsonAsync<Reset>(apiUrl, reset);

                if (result.IsSuccessStatusCode)
                {
                    Login();
                }
                else
                {
                    errorMessage = "Invalid username or password";
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }
    }

    void Login() => NavigationManager.NavigateTo("/login");

    public class Reset
    {
        public string Token { get; set; }

        public string Email { get; set; }
        
        public string Password { get; set; }
        
        public string ConfirmPassword { get; set; }
    }
}
