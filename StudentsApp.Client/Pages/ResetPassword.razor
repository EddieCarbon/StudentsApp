@page "/reset-password"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using StudentsApp.Client.Models;
@using System.Text.Json;


<h3>ResetPassword</h3>

<EditForm Model="reset" OnSubmit="HandleReset">
    <label for="password">Password</label>
    <InputText id="password" class="form-control" @bind-Value="reset.Password" type="password" />
    <ValidationMessage For="@(() => reset.Password)" />

    <label for="confirmPassword">Confirm password</label>
    <InputText id="confirmPassword" class="form-control" @bind-Value="reset.ConfirmPassword" type="password" />
    <ValidationMessage For="@(() => reset.ConfirmPassword)" />

    <br />
    <button type="submit" class="btn btn-primary">Send</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    Reset reset = new Reset();

    private string errorMessage;

    private string token;
    private string email;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        reset.Token = query.Get("token").Replace(" ", "+");
        reset.Email = query.Get("email");
    }
    
    public async Task HandleReset()
    {
        var editContext = new EditContext(reset);
        var isValid = editContext.Validate();

        if (isValid)
        {
            string apiUrl = "https://localhost:44363/api/identity/resetpassword";

            try
            {
                var result = await Http.PostAsJsonAsync(apiUrl, reset);

                if (result.IsSuccessStatusCode)
                {
                    Login();
                }
                else
                {
                    errorMessage = "Invalid username or password";
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }
        }
    }


    private void GetParametersFromUrl(string token, string email)
    {
        if (token != null && email != null)
        {
            reset.Token = token;
            Console.WriteLine(reset.Token);
            reset.Email = email;
            Console.WriteLine(reset.Email);
        }
        else
        {
            errorMessage = "Bad reset link";
        }
    }

    void Login() => NavigationManager.NavigateTo("/login");
}
